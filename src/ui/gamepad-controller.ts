/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–π–º–ø–∞–¥–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
 */

import { GAMEPAD_CONFIG, LOG_CONFIG } from '../config';
import { logger } from '../utils/logger';
import type { Twist } from '../types';

export class GamepadController {
  private connected = false;
  private intervalId: number | null = null;
  private currentRobotName = '';
  private publishCallback: ((topic: string, data: Uint8Array) => Promise<void>) | null = null;

  constructor(
    private button: HTMLButtonElement,
    private overlay: HTMLElement,
    private pitchIndicator: HTMLElement,
    private yawIndicator: HTMLElement,
    private robotVisual: HTMLElement,
    private robotCanvas: HTMLCanvasElement
  ) {
    this.setupEventListeners();
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
   */
  setPublishCallback(callback: (topic: string, data: Uint8Array) => Promise<void>): void {
    this.publishCallback = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–±–æ—Ç–∞
   */
  setRobot(robotName: string): void {
    this.currentRobotName = robotName;
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventListeners(): void {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Gamepad API
    if (!('getGamepads' in navigator)) {
      this.button.disabled = true;
      this.button.title = '–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Gamepad API';
      this.button.textContent = 'üéÆ Gamepad –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      return;
    }

    // –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–µ–π–º–ø–∞–¥–∞ - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
    window.addEventListener('gamepadconnected', (e: GamepadEvent) => {
      logger.info(LOG_CONFIG.PREFIXES.GAMEPAD, `–ì–µ–π–º–ø–∞–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${e.gamepad.id}`);
      if (!this.connected) {
        logger.info(LOG_CONFIG.PREFIXES.GAMEPAD, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–µ–π–º–ø–∞–¥–∞...');
        this.connect();
      }
    });

    // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≥–µ–π–º–ø–∞–¥–∞
    window.addEventListener('gamepaddisconnected', (e: GamepadEvent) => {
      logger.info(LOG_CONFIG.PREFIXES.GAMEPAD, `–ì–µ–π–º–ø–∞–¥ –æ—Ç–∫–ª—é—á–µ–Ω: ${e.gamepad.id}`);
      if (this.connected) {
        this.disconnect();
      }
    });

    // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    this.button.addEventListener('click', () => {
      if (this.connected) {
        this.disconnect();
      } else {
        this.connect();
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –≥–µ–π–º–ø–∞–¥ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    this.checkExistingGamepads();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≥–µ–π–º–ø–∞–¥—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  private checkExistingGamepads(): void {
    const gamepads = navigator.getGamepads();
    for (let i = 0; i < gamepads.length; i++) {
      if (gamepads[i]) {
        logger.info(
          LOG_CONFIG.PREFIXES.GAMEPAD,
          `–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –≥–µ–π–º–ø–∞–¥: ${gamepads[i]!.id}`
        );
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≥–µ–π–º–ø–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω
        this.button.textContent = 'üéÆ –ì–µ–π–º–ø–∞–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏';
        this.button.style.backgroundColor = '#4CAF50';
        break;
      }
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≥–µ–π–º–ø–∞–¥
   */
  private connect(): void {
    const gamepads = navigator.getGamepads();
    let gamepad: Gamepad | null = null;

    for (let i = 0; i < gamepads.length; i++) {
      if (gamepads[i]) {
        gamepad = gamepads[i];
        break;
      }
    }

    if (!gamepad) {
      logger.warn(
        LOG_CONFIG.PREFIXES.GAMEPAD,
        '‚ùå –ì–µ–π–º–ø–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≥–µ–π–º–ø–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'
      );
      alert('–ì–µ–π–º–ø–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≥–µ–π–º–ø–∞–¥ –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É\n2. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –≥–µ–π–º–ø–∞–¥–µ\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å –≥–µ–π–º–ø–∞–¥–∞
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }

    this.intervalId = window.setInterval(() => this.poll(), GAMEPAD_CONFIG.POLL_INTERVAL);
    this.connected = true;

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.button.classList.add('connected');
    this.button.textContent = '‚èπ –û—Ç–∫–ª—é—á–∏—Ç—å –≥–µ–π–º–ø–∞–¥';
    this.button.style.backgroundColor = '#f44336';
    this.overlay.style.display = 'block';
    this.robotVisual.style.display = 'block';

    logger.info(LOG_CONFIG.PREFIXES.GAMEPAD, `‚úÖ –ì–µ–π–º–ø–∞–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${gamepad.id}`);
    logger.info(LOG_CONFIG.PREFIXES.GAMEPAD, `üìä –û—Å–µ–π: ${gamepad.axes.length}, –ö–Ω–æ–ø–æ–∫: ${gamepad.buttons.length}`);
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç –≥–µ–π–º–ø–∞–¥
   */
  private disconnect(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    this.publishTwist(0, 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.connected = false;
    this.button.classList.remove('connected');
    this.button.textContent = 'üéÆ Connect Gamepad';
    this.overlay.style.display = 'none';
    this.robotVisual.style.display = 'none';

    logger.info(LOG_CONFIG.PREFIXES.GAMEPAD, '–ì–µ–π–º–ø–∞–¥ –æ—Ç–∫–ª—é—á–µ–Ω');
  }

  /**
   * –û–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–π–º–ø–∞–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã
   */
  private poll(): void {
    const gamepads = navigator.getGamepads();
    if (gamepads.length === 0 || !gamepads[0]) {
      logger.warn(LOG_CONFIG.PREFIXES.GAMEPAD, '–ì–µ–π–º–ø–∞–¥ –ø–æ—Ç–µ—Ä—è–Ω, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
      this.disconnect();
      return;
    }

    const gamepad = gamepads[0];

    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const pitch = gamepad.axes[GAMEPAD_CONFIG.PITCH_AXIS]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ—Å—å 1
    const yaw = gamepad.axes[GAMEPAD_CONFIG.YAW_AXIS];     // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ—Å—å 3

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ä—Ç–≤—É—é –∑–æ–Ω—É
    const pitchValue = Math.abs(pitch) > GAMEPAD_CONFIG.DEADZONE ? pitch : 0;
    const yawValue = Math.abs(yaw) > GAMEPAD_CONFIG.DEADZONE ? yaw : 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    this.updateVisualization(pitchValue, yawValue);

    // –ï—Å–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–µ—Ä—Ç–≤–æ–π –∑–æ–Ω–µ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    if (pitchValue === 0 && yawValue === 0) {
      this.publishTwist(0, 0);
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–∏–Ω–µ–π–Ω—É—é –∏ —É–≥–ª–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
    const linear = pitchValue * GAMEPAD_CONFIG.MAX_LINEAR_SPEED;
    const angular = -yawValue * GAMEPAD_CONFIG.MAX_ANGULAR_SPEED;

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–±–æ—Ç–∞
    this.renderRobotVisualization(linear, angular);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    this.publishTwist(linear, angular);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
   */
  private updateVisualization(pitch: number, yaw: number): void {
    // Pitch: -1 (–Ω–∞–∑–∞–¥) -> 0%, 0 (–Ω–µ–π—Ç—Ä–∞–ª—å) -> 50%, 1 (–≤–ø–µ—Ä–µ–¥) -> 100%
    const pitchPercent = (pitch + 1) * 50;
    this.pitchIndicator.style.width = `${pitchPercent}%`;
    this.pitchIndicator.style.backgroundColor = pitch >= 0 ? '#4CAF50' : '#f44336';

    // Yaw: -1 (–≤–ø—Ä–∞–≤–æ) -> 0%, 0 (–Ω–µ–π—Ç—Ä–∞–ª—å) -> 50%, 1 (–≤–ª–µ–≤–æ) -> 100%
    const yawPercent = (yaw + 1) * 50;
    this.yawIndicator.style.width = `${yawPercent}%`;
    this.yawIndicator.style.backgroundColor = '#2196F3';
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–æ–±–æ—Ç–∞
   */
  private renderRobotVisualization(linear: number, angular: number): void {
    const ctx = this.robotCanvas.getContext('2d');
    if (!ctx) return;

    // –û—á–∏—Å—Ç–∫–∞
    ctx.clearRect(0, 0, this.robotCanvas.width, this.robotCanvas.height);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ–±–æ—Ç–∞
    const robotWidth = 60;
    const robotHeight = 80;
    const wheelWidth = 10;
    const wheelHeight = 20;

    const centerX = this.robotCanvas.width / 2;
    const centerY = this.robotCanvas.height / 2;

    // –ö–æ—Ä–ø—É—Å —Ä–æ–±–æ—Ç–∞
    ctx.fillStyle = '#333';
    ctx.fillRect(
      centerX - robotWidth / 2,
      centerY - robotHeight / 2,
      robotWidth,
      robotHeight
    );

    // –ö–æ–ª–µ—Å–∞
    ctx.fillStyle = '#555';
    const wheelOffset = 15;
    
    // –õ–µ–≤—ã–µ –∫–æ–ª–µ—Å–∞
    ctx.fillRect(
      centerX - robotWidth / 2 - 5,
      centerY - robotHeight / 2 + wheelOffset - wheelHeight / 2,
      wheelWidth,
      wheelHeight
    );
    ctx.fillRect(
      centerX - robotWidth / 2 - 5,
      centerY + robotHeight / 2 - wheelOffset - wheelHeight / 2,
      wheelWidth,
      wheelHeight
    );

    // –ü—Ä–∞–≤—ã–µ –∫–æ–ª–µ—Å–∞
    ctx.fillRect(
      centerX + robotWidth / 2 - 5,
      centerY - robotHeight / 2 + wheelOffset - wheelHeight / 2,
      wheelWidth,
      wheelHeight
    );
    ctx.fillRect(
      centerX + robotWidth / 2 - 5,
      centerY + robotHeight / 2 - wheelOffset - wheelHeight / 2,
      wheelWidth,
      wheelHeight
    );

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ–ª–µ—Å
    const leftSpeed = linear - angular * 0.3;
    const rightSpeed = linear + angular * 0.3;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    const normalizedLeft = Math.max(-1, Math.min(1, leftSpeed));
    const normalizedRight = Math.max(-1, Math.min(1, rightSpeed));

    // –í–µ–∫—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
    const vectorLength = 40;

    // –õ–µ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
    ctx.strokeStyle = normalizedLeft >= 0 ? '#4CAF50' : '#f44336';
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.moveTo(centerX - 15, centerY);
    ctx.lineTo(centerX - 15, centerY - vectorLength * normalizedLeft);
    ctx.stroke();

    // –°—Ç—Ä–µ–ª–∫–∞ –ª–µ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
    const leftArrowY = centerY - vectorLength * normalizedLeft;
    ctx.fillStyle = ctx.strokeStyle;
    ctx.beginPath();
    if (normalizedLeft >= 0) {
      ctx.moveTo(centerX - 15, leftArrowY);
      ctx.lineTo(centerX - 19, leftArrowY + 8);
      ctx.lineTo(centerX - 11, leftArrowY + 8);
    } else {
      ctx.moveTo(centerX - 15, leftArrowY);
      ctx.lineTo(centerX - 19, leftArrowY - 8);
      ctx.lineTo(centerX - 11, leftArrowY - 8);
    }
    ctx.closePath();
    ctx.fill();

    // –ü—Ä–∞–≤—ã–π –≤–µ–∫—Ç–æ—Ä
    ctx.strokeStyle = normalizedRight >= 0 ? '#4CAF50' : '#f44336';
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.moveTo(centerX + 15, centerY);
    ctx.lineTo(centerX + 15, centerY - vectorLength * normalizedRight);
    ctx.stroke();

    // –°—Ç—Ä–µ–ª–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
    const rightArrowY = centerY - vectorLength * normalizedRight;
    ctx.fillStyle = ctx.strokeStyle;
    ctx.beginPath();
    if (normalizedRight >= 0) {
      ctx.moveTo(centerX + 15, rightArrowY);
      ctx.lineTo(centerX + 11, rightArrowY + 8);
      ctx.lineTo(centerX + 19, rightArrowY + 8);
    } else {
      ctx.moveTo(centerX + 15, rightArrowY);
      ctx.lineTo(centerX + 11, rightArrowY - 8);
      ctx.lineTo(centerX + 19, rightArrowY - 8);
    }
    ctx.closePath();
    ctx.fill();
  }

  /**
   * –ü—É–±–ª–∏–∫—É–µ—Ç Twist —Å–æ–æ–±—â–µ–Ω–∏–µ
   * TODO: –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–Ω–∫–æ–¥–∏–Ω–≥ CDR –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * –°–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ parseCDRBytes
   */
  private publishTwist(linear: number, angular: number): void {
    if (!this.publishCallback || !this.currentRobotName) return;

    try {
      const twist: Twist = {
        linear: { x: linear, y: 0, z: 0 },
        angular: { x: 0, y: 0, z: angular },
      };

      // –í—Ä–µ–º–µ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —ç–Ω–∫–æ–¥–∏–Ω–≥
      logger.debug(
        LOG_CONFIG.PREFIXES.GAMEPAD,
        `Twist: linear=${linear.toFixed(2)}, angular=${angular.toFixed(2)}`
      );

      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å encoding –≤ CDR —Ñ–æ—Ä–º–∞—Ç
      // const cdrBytes = encodeCDRBytes(twist, twistSchema);
      // this.publishCallback(ROS_TOPICS.CMD_VEL, cdrBytes);
    } catch (err) {
      logger.error(LOG_CONFIG.PREFIXES.GAMEPAD, '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Twist:', err);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –≥–µ–π–º–ø–∞–¥
   */
  isConnected(): boolean {
    return this.connected;
  }
}
